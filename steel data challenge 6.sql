use marketing;

-- 1. How many transactions were completed during each marketing campaign?
SELECT mc.campaign_name, COUNT(*) AS total_transactions
FROM transactions t
JOIN marketing_campaigns mc ON t.product_id = mc.product_id
WHERE t.purchase_date BETWEEN mc.start_date AND mc.end_date
GROUP BY mc.campaign_name;

-- 2. Which product had the highest sales quantity?
WITH cte1 as(
SELECT product_name, sum(quantity) AS sale_quantity , 
DENSE_RANK() OVER(ORDER BY sum(quantity) DESC) AS ranking
FROM transactions t JOIN sustainable_clothing sc
ON t.product_id = sc.product_id
GROUP BY product_name
ORDER BY sale_quantity DESC ) 
SELECT product_name, sale_quantity FROM cte1 WHERE ranking = 1;

-- 3. What is the total revenue generated from each marketing campaign?
SELECT campaign_name, round(sum(quantity * price),4) AS total_revenue 
FROM transactions t 
JOIN sustainable_clothing sc ON t.product_id = sc.product_id 
JOIN marketing_campaigns mc ON mc.product_id = sc.product_id
WHERE t.purchase_date BETWEEN mc.start_date AND mc.end_date
GROUP BY mc.campaign_name;

--  4. What is the top-selling product category based on the total revenue generated?
WITH cte1 AS (
SELECT category, round(sum(quantity * price),4) AS total_revenue, 
DENSE_RANK() OVER(ORDER BY  sum(quantity * price) DESC) AS ranking 
FROM transactions t JOIN sustainable_clothing sc ON t.product_id = sc.product_id 
GROUP BY category) 
SELECT category, total_revenue FROM cte1 WHERE ranking = 1;

-- 5. Which products had a higher quantity sold compared to the average quantity sold?
SELECT t.product_id, product_name, sum(quantity) AS total_quantity
FROM transactions t JOIN sustainable_clothing sc ON t.product_id = sc.product_id
GROUP BY product_id
HAVING total_quantity > AVG(quantity)
ORDER BY total_quantity DESC;

SELECT avg(quantity) AS avg_quantity
FROM transactions t JOIN sustainable_clothing sc ON t.product_id = sc.product_id;

-- 6. What is the average revenue generated per day during the marketing campaigns?
SELECT mc.campaign_name, ROUND(SUM(quantity * price) / DATEDIFF(mc.end_date, mc.start_date), 4) AS Average_revenue
FROM transactions t
JOIN sustainable_clothing sc ON t.product_id = sc.product_id
JOIN marketing_campaigns mc ON mc.product_id = sc.product_id
WHERE t.purchase_date BETWEEN mc.start_date AND mc.end_date
GROUP BY mc.campaign_name, end_date, start_date;

-- 7. What is the percentage contribution of each product to the total revenue?
SELECT product_name, 
round((sum(quantity * price) / sum(sum(quantity * price)) OVER() )*100,4)  AS revenue_percentage
FROM transactions t JOIN sustainable_clothing sc ON t.product_id = sc.product_id
GROUP BY product_name ORDER BY revenue_percentage DESC;

-- 8. Compare the average quantity sold during marketing campaigns to outside the marketing campaigns
SELECT marketing_avg_quantity, non_marketing_avg_quantity
FROM
  (SELECT AVG(quantity) AS marketing_avg_quantity
   FROM transactions
   WHERE purchase_date BETWEEN '2023-06-01' AND '2023-06-30'
      OR purchase_date BETWEEN '2023-07-15' AND '2023-08-15'
      OR purchase_date BETWEEN '2023-08-20' AND '2023-09-15') AS subquery1,
  (SELECT AVG(quantity) AS non_marketing_avg_quantity
   FROM transactions
   WHERE purchase_date NOT BETWEEN '2023-06-01' AND '2023-06-30'
      AND purchase_date NOT BETWEEN '2023-07-15' AND '2023-08-15'
      AND purchase_date NOT BETWEEN '2023-08-20' AND '2023-09-15') AS subquery2;

-- 9. Compare the revenue generated by products inside the marketing campaigns to outside the campaigns
SELECT revenue_during_campaign, revenue_during_non_campaign
FROM
  (SELECT round(sum(quantity * price),4) AS revenue_during_campaign
   FROM transactions t JOIN sustainable_clothing sc ON t.product_id = sc.product_id
   WHERE purchase_date BETWEEN '2023-06-01' AND '2023-06-30'
      OR purchase_date BETWEEN '2023-07-15' AND '2023-08-15'
      OR purchase_date BETWEEN '2023-08-20' AND '2023-09-15') AS subquery1,
  (SELECT round(sum(quantity * price),4) AS revenue_during_non_campaign
   FROM transactions t JOIN sustainable_clothing sc ON t.product_id = sc.product_id
   WHERE purchase_date NOT BETWEEN '2023-06-01' AND '2023-06-30'
      AND purchase_date NOT BETWEEN '2023-07-15' AND '2023-08-15'
      AND purchase_date NOT BETWEEN '2023-08-20' AND '2023-09-15') AS subquery2;
      
-- 10. Rank the products by their average daily quantity sold
WITH cte1 AS (
  SELECT sc.product_name, AVG(t.quantity) AS average_quantity
  FROM transactions t
  JOIN sustainable_clothing sc ON t.product_id = sc.product_id
  GROUP BY sc.product_name
)
SELECT product_name, average_quantity, DENSE_RANK() OVER (ORDER BY average_quantity DESC) AS Ranking
FROM cte1;